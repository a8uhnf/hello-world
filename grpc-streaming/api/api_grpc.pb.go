// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServiceClient interface {
	// One request followed by one response
	// The server returns the client message as-is.
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Sends back abort status.
	EchoAbort(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// One empty request, ZERO processing, followed by one empty response
	// (minimum effort to do message serialization).
	NoOp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// One request followed by a sequence of responses (streamed download).
	// The server will return the same client message repeatedly.
	ServerStreamingEcho(ctx context.Context, in *ServerStreamingEchoRequest, opts ...grpc.CallOption) (EchoService_ServerStreamingEchoClient, error)
	// One request followed by a sequence of responses (streamed download).
	// The server abort directly.
	ServerStreamingEchoAbort(ctx context.Context, in *ServerStreamingEchoRequest, opts ...grpc.CallOption) (EchoService_ServerStreamingEchoAbortClient, error)
	// A sequence of requests followed by one response (streamed upload).
	// The server returns the total number of messages as the result.
	ClientStreamingEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_ClientStreamingEchoClient, error)
	// A sequence of requests with each message echoed by the server immediately.
	// The server returns the same client messages in order.
	// E.g. this is how the speech API works.
	FullDuplexEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_FullDuplexEchoClient, error)
	// A sequence of requests followed by a sequence of responses.
	// The server buffers all the client messages and then returns the same
	// client messages one by one after the client half-closes the stream.
	// This is how an image recognition API may work.
	HalfDuplexEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_HalfDuplexEchoClient, error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/grpc.a8uhnf.streaming.EchoService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoAbort(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/grpc.a8uhnf.streaming.EchoService/EchoAbort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) NoOp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.a8uhnf.streaming.EchoService/NoOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) ServerStreamingEcho(ctx context.Context, in *ServerStreamingEchoRequest, opts ...grpc.CallOption) (EchoService_ServerStreamingEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[0], "/grpc.a8uhnf.streaming.EchoService/ServerStreamingEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceServerStreamingEchoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoService_ServerStreamingEchoClient interface {
	Recv() (*ServerStreamingEchoResponse, error)
	grpc.ClientStream
}

type echoServiceServerStreamingEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceServerStreamingEchoClient) Recv() (*ServerStreamingEchoResponse, error) {
	m := new(ServerStreamingEchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) ServerStreamingEchoAbort(ctx context.Context, in *ServerStreamingEchoRequest, opts ...grpc.CallOption) (EchoService_ServerStreamingEchoAbortClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[1], "/grpc.a8uhnf.streaming.EchoService/ServerStreamingEchoAbort", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceServerStreamingEchoAbortClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoService_ServerStreamingEchoAbortClient interface {
	Recv() (*ServerStreamingEchoResponse, error)
	grpc.ClientStream
}

type echoServiceServerStreamingEchoAbortClient struct {
	grpc.ClientStream
}

func (x *echoServiceServerStreamingEchoAbortClient) Recv() (*ServerStreamingEchoResponse, error) {
	m := new(ServerStreamingEchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) ClientStreamingEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_ClientStreamingEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[2], "/grpc.a8uhnf.streaming.EchoService/ClientStreamingEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceClientStreamingEchoClient{stream}
	return x, nil
}

type EchoService_ClientStreamingEchoClient interface {
	Send(*ClientStreamingEchoRequest) error
	CloseAndRecv() (*ClientStreamingEchoResponse, error)
	grpc.ClientStream
}

type echoServiceClientStreamingEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceClientStreamingEchoClient) Send(m *ClientStreamingEchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceClientStreamingEchoClient) CloseAndRecv() (*ClientStreamingEchoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamingEchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) FullDuplexEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_FullDuplexEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[3], "/grpc.a8uhnf.streaming.EchoService/FullDuplexEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceFullDuplexEchoClient{stream}
	return x, nil
}

type EchoService_FullDuplexEchoClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceFullDuplexEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceFullDuplexEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceFullDuplexEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) HalfDuplexEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_HalfDuplexEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[4], "/grpc.a8uhnf.streaming.EchoService/HalfDuplexEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceHalfDuplexEchoClient{stream}
	return x, nil
}

type EchoService_HalfDuplexEchoClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceHalfDuplexEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceHalfDuplexEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceHalfDuplexEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServiceServer is the server API for EchoService service.
// All implementations must embed UnimplementedEchoServiceServer
// for forward compatibility
type EchoServiceServer interface {
	// One request followed by one response
	// The server returns the client message as-is.
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// Sends back abort status.
	EchoAbort(context.Context, *EchoRequest) (*EchoResponse, error)
	// One empty request, ZERO processing, followed by one empty response
	// (minimum effort to do message serialization).
	NoOp(context.Context, *Empty) (*Empty, error)
	// One request followed by a sequence of responses (streamed download).
	// The server will return the same client message repeatedly.
	ServerStreamingEcho(*ServerStreamingEchoRequest, EchoService_ServerStreamingEchoServer) error
	// One request followed by a sequence of responses (streamed download).
	// The server abort directly.
	ServerStreamingEchoAbort(*ServerStreamingEchoRequest, EchoService_ServerStreamingEchoAbortServer) error
	// A sequence of requests followed by one response (streamed upload).
	// The server returns the total number of messages as the result.
	ClientStreamingEcho(EchoService_ClientStreamingEchoServer) error
	// A sequence of requests with each message echoed by the server immediately.
	// The server returns the same client messages in order.
	// E.g. this is how the speech API works.
	FullDuplexEcho(EchoService_FullDuplexEchoServer) error
	// A sequence of requests followed by a sequence of responses.
	// The server buffers all the client messages and then returns the same
	// client messages one by one after the client half-closes the stream.
	// This is how an image recognition API may work.
	HalfDuplexEcho(EchoService_HalfDuplexEchoServer) error
	mustEmbedUnimplementedEchoServiceServer()
}

// UnimplementedEchoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (UnimplementedEchoServiceServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedEchoServiceServer) EchoAbort(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoAbort not implemented")
}
func (UnimplementedEchoServiceServer) NoOp(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoOp not implemented")
}
func (UnimplementedEchoServiceServer) ServerStreamingEcho(*ServerStreamingEchoRequest, EchoService_ServerStreamingEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingEcho not implemented")
}
func (UnimplementedEchoServiceServer) ServerStreamingEchoAbort(*ServerStreamingEchoRequest, EchoService_ServerStreamingEchoAbortServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingEchoAbort not implemented")
}
func (UnimplementedEchoServiceServer) ClientStreamingEcho(EchoService_ClientStreamingEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingEcho not implemented")
}
func (UnimplementedEchoServiceServer) FullDuplexEcho(EchoService_FullDuplexEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method FullDuplexEcho not implemented")
}
func (UnimplementedEchoServiceServer) HalfDuplexEcho(EchoService_HalfDuplexEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method HalfDuplexEcho not implemented")
}
func (UnimplementedEchoServiceServer) mustEmbedUnimplementedEchoServiceServer() {}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.a8uhnf.streaming.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.a8uhnf.streaming.EchoService/EchoAbort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoAbort(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_NoOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).NoOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.a8uhnf.streaming.EchoService/NoOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).NoOp(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_ServerStreamingEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamingEchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).ServerStreamingEcho(m, &echoServiceServerStreamingEchoServer{stream})
}

type EchoService_ServerStreamingEchoServer interface {
	Send(*ServerStreamingEchoResponse) error
	grpc.ServerStream
}

type echoServiceServerStreamingEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceServerStreamingEchoServer) Send(m *ServerStreamingEchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EchoService_ServerStreamingEchoAbort_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamingEchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).ServerStreamingEchoAbort(m, &echoServiceServerStreamingEchoAbortServer{stream})
}

type EchoService_ServerStreamingEchoAbortServer interface {
	Send(*ServerStreamingEchoResponse) error
	grpc.ServerStream
}

type echoServiceServerStreamingEchoAbortServer struct {
	grpc.ServerStream
}

func (x *echoServiceServerStreamingEchoAbortServer) Send(m *ServerStreamingEchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EchoService_ClientStreamingEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).ClientStreamingEcho(&echoServiceClientStreamingEchoServer{stream})
}

type EchoService_ClientStreamingEchoServer interface {
	SendAndClose(*ClientStreamingEchoResponse) error
	Recv() (*ClientStreamingEchoRequest, error)
	grpc.ServerStream
}

type echoServiceClientStreamingEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceClientStreamingEchoServer) SendAndClose(m *ClientStreamingEchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceClientStreamingEchoServer) Recv() (*ClientStreamingEchoRequest, error) {
	m := new(ClientStreamingEchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EchoService_FullDuplexEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).FullDuplexEcho(&echoServiceFullDuplexEchoServer{stream})
}

type EchoService_FullDuplexEchoServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceFullDuplexEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceFullDuplexEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceFullDuplexEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EchoService_HalfDuplexEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).HalfDuplexEcho(&echoServiceHalfDuplexEchoServer{stream})
}

type EchoService_HalfDuplexEchoServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceHalfDuplexEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceHalfDuplexEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceHalfDuplexEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.a8uhnf.streaming.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
		{
			MethodName: "EchoAbort",
			Handler:    _EchoService_EchoAbort_Handler,
		},
		{
			MethodName: "NoOp",
			Handler:    _EchoService_NoOp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingEcho",
			Handler:       _EchoService_ServerStreamingEcho_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ServerStreamingEchoAbort",
			Handler:       _EchoService_ServerStreamingEchoAbort_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingEcho",
			Handler:       _EchoService_ClientStreamingEcho_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FullDuplexEcho",
			Handler:       _EchoService_FullDuplexEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "HalfDuplexEcho",
			Handler:       _EchoService_HalfDuplexEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc-streaming/api/api.proto",
}
